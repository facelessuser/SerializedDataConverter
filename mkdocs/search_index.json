{
    "docs": [
        {
            "location": "/", 
            "text": "SerializedDataConverter\n\n\nConvert between PLIST, BPLIST, JSON, and YAML.\n\n\n\n\nOverview\n\n\nConvert between serialized data formats (plist | bplist | json | yaml)\n\n\n\n\nThird Party Libraries\n\n\n\n\npyyaml: \nhttps://github.com/yaml/pyyaml\n\n\nplistlib: Sublime Text 3 currently uses Python 3.3, but Python 3.4 has a new version of plistlib that handles binary plists.  To get this functionality, we dropped the \nPython 3.4 plistlib\n directly into the plugin with minor changes to get it working in Python 3.3.  Eventually this will be removed if Sublime moves to Python 3.4.", 
            "title": "About SerializedDataConverter"
        }, 
        {
            "location": "/#serializeddataconverter", 
            "text": "Convert between PLIST, BPLIST, JSON, and YAML.", 
            "title": "SerializedDataConverter"
        }, 
        {
            "location": "/#overview", 
            "text": "Convert between serialized data formats (plist | bplist | json | yaml)", 
            "title": "Overview"
        }, 
        {
            "location": "/#third-party-libraries", 
            "text": "pyyaml:  https://github.com/yaml/pyyaml  plistlib: Sublime Text 3 currently uses Python 3.3, but Python 3.4 has a new version of plistlib that handles binary plists.  To get this functionality, we dropped the  Python 3.4 plistlib  directly into the plugin with minor changes to get it working in Python 3.3.  Eventually this will be removed if Sublime moves to Python 3.4.", 
            "title": "Third Party Libraries"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling SerializedDataConverter.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install SerializedDataConverter is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nSerializedDataConverter\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install SerializedDataConverter for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/SerializedDataConverter.git SerializedDataConverter\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing SerializedDataConverter.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install SerializedDataConverter is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  SerializedDataConverter ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install SerializedDataConverter for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/SerializedDataConverter.git SerializedDataConverter    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of SerializedDataConverter.\n\n\n\n\nCommands\n\n\nAll commands are accessible via the command palette.  Comments are not preserved during conversion.\n\n\nSerialized Data Converter: (Type A) to (Type B)\n\n\nCommand that converts an open (JSON|PLIST|BPLIST|YAML) file to (JSON|PLIST|BPLIST|YAML). It will strip C style comments and also try and catch forgotten trailing commas for JSON source files if converting from JSON.\n\n\nNote that when reading a BPLIST (binary PLIST), the encoding must be \nHexadecimal\n or the view must be a file that exists on disk so that the raw, un-encoded data can be acquired as encoding can cause data to be lost.\n\n\nSerialized Data Converter: Save (Type A) to (Type B)\n\n\nCommand that converts an open (JSON|PLIST|BPLIST|YAML) file to (JSON|PLIST|BPLIST|YAML) and saves it to the respective file type.  File name is determined by the appropriate setting (\nplist_json_conversion_ext\n|\nplist_yaml_conversion_ext\n|\njson_yaml_conversion_ext\n|\nbplist_json_conversion_ext\n|\nbplist_yaml_conversion_ext\n|\nbplist_plist_conversion_ext\n).  It will strip C style comments and also try and catch forgotten trailing commas for JSON source files if converting from JSON. If the file to convert does not exist on disk, the converted file will not initially exist either, but it will only be shown in the view buffer until saved manually.\n\n\nNote that when reading a BPLIST (binary PLIST), the encoding must be \nHexadecimal\n or the view must be a file that exists on disk so that the raw, un-encoded data can be acquired as encoding can lose some of the data.\n\n\nSettings\n\n\nSerializedDataConverter has a number of settings that can be configured.\n\n\nenable_save_to_file_commands\n\n\nAllows the disabling of the \nsave to file\n commands in the command palette.\n\n\n    \n// Enable creation of new file based on extension map containing the converted data\n\n    \n// If the current file to convert does not exist on disk, the converted file will default\n\n    \n// To being shown in a view buffer only, and will not be automatically saved to disk.\n\n    \nenable_save_to_file_commands\n:\n \ntrue\n,\n\n\n\n\n\n\nenable_show_in_buffer_commands\n\n\nAllows the disabling of the \nshow conversion in view buffer\n commands in the command palette.\n\n\n    \n// Enable show conversion in a view buffer\n\n    \nenable_show_in_buffer_commands\n:\n \ntrue\n,\n\n\n\n\n\n\nopen_in_new_buffer\n\n\nWhen a \nshow conversion in view buffer\n command is executed, this will force the conversion to show up in its own new view buffer.\n\n\n    \n// When converting buffer open conversion in new buffer\n\n    \nopen_in_new_buffer\n:\n \ntrue\n,\n\n\n\n\n\n\n(Type A)_(Type B)_conversion_ext\n\n\nAllows you to provide a file name conversion mapping from any type extension to a another type extension and vice versa.  They are evaluated in the order they appear.  The name of the setting denotes which file type to which file the conversion rules apply to.  The mapping rules are defined by using the file type as the key, and the desired extension as the value.  The mapping works both ways, so if the name is \nplist_json_conversion_ext\n, then it will convert in either direction; either PLIST \n JSON or JSON \n PLIST.\n\n\n    \n// When saving converted data to a file, or when opening\n\n    \n// conversion in new buffer use these extension maps for file name.\n\n    \n// Extensions will be evaluated in the order listed below.\n\n    \n// If the file does not match any of the extensions, the current\n\n    \n// extension will be replaced with either \nplist\n, \njson\n, or \nyaml\n accordingly.\n\n    \nplist_json_conversion_ext\n:\n \n[\n\n        \n{\nplist\n:\n \ntmLanguage\n,\n \njson\n:\n \ntmLanguage.JSON\n},\n\n        \n{\nplist\n:\n \ntmPreferences\n,\n \njson\n:\n \ntmPreferences.JSON\n},\n\n        \n{\nplist\n:\n \ntmTheme\n,\n \njson\n:\n \ntmTheme.JSON\n}\n\n    \n],\n\n\n    \nplist_yaml_conversion_ext\n:\n \n[\n\n        \n{\nplist\n:\n \ntmLanguage\n,\n \nyaml\n:\n \ntmLanguage.YAML\n},\n\n        \n{\nplist\n:\n \ntmPreferences\n,\n \nyaml\n:\n \ntmPreferences.YAML\n},\n\n        \n{\nplist\n:\n \ntmTheme\n,\n \nyaml\n:\n \ntmTheme.YAML\n}\n\n    \n],\n\n\n    \nbplist_json_conversion_ext\n:\n \n[\n\n    \n],\n\n\n    \nbplist_yaml_conversion_ext\n:\n \n[\n\n    \n],\n\n\n    \nbplist_plist_conversion_ext\n:\n \n[\n\n    \n],\n\n\n    \njson_yaml_conversion_ext\n:\n \n[\n\n        \n// Nothing to see here; move along\n\n        \n// Add your rules here\n\n        \n//{\njson\n: \nsome extension\n, \nyaml\n: \nsome extension\n}\n\n    \n],\n\n\n\n\n\n\n(Type)_language\n\n\nAllows the selection of a given language file to be used for the converted buffer or file.\n\n\n    \n// Languages to use on conversion\n\n    \njson_language\n:\n \nPackages/JavaScript/JSON.tmLanguage\n,\n\n    \nyaml_language\n:\n \nPackages/YAML/YAML.tmLanguage\n,\n\n    \nplist_language\n:\n \nPackages/XML/XML.tmLanguage\n,\n\n    \nbplist_language\n:\n \nPackages/Text/Plain text.tmLanguage\n,\n\n\n\n\n\n\nconvert_on_save\n\n\nWhen a file with the specified extension is saved, the plugin will automatically run the conversion command on the file and save the converted form to the disk.\n\n\n    \nconvert_on_save\n:\n \n[\n\n        \n// Enable or add what you would like\n\n        \n// {\next\n: \ntmLanguage.JSON\n, \ncommand\n: \njson_to_plist\n},\n\n        \n// {\next\n: \ntmPreferences.JSON\n, \ncommand\n: \njson_to_plist\n},\n\n        \n// {\next\n: \ntmTheme.JSON\n, \ncommand\n: \njson_to_plist\n},\n\n        \n// {\next\n: \ntmLanguage.YAML\n, \ncommand\n: \nyaml_to_plist\n},\n\n        \n// {\next\n: \ntmPreferences.YAML\n, \ncommand\n: \nyaml_to_plist\n},\n\n        \n// {\next\n: \ntmTheme.YAML\n, \ncommand\n: \nyaml_to_plist\n}\n\n    \n],\n\n\n\n\n\n\nyaml_strip_tabs_from\n\n\nThese are language extensions in which the converter will strip tabs from to ensure multi-lines aren\nt quoted with \n\\t\n.  It also strips trailing spaces from multi-line strings. This helps multi-line strings convert in a pretty format (does not guarantee all values will be convert to a pretty format, but increases the odds). If you are having trouble converting a file and getting a 1:1 translation, remove the file type.\n\n\n    \nyaml_strip_tabs_from\n:\n \n[\n\n        \ntmLanguage\n,\n\n        \ntmTheme\n,\n\n        \ntmPreferences\n,\n\n        \ntmLanguage.JSON\n,\n\n        \ntmTheme.JSON\n,\n\n        \ntmPreferences.JSON\n\n    \n],\n\n\n\n\n\n\nyaml_default_flow_style\n\n\nLets you control the YAML output flow style.\n\n\n    \n// In most this should be left to \nfalse\n for easy reading, but feel free to change it\n\n    \n// (none | true | false)\n\n    \n// none shows things like this will (pretty good):\n\n    \n//     \n1\n: {name: something}\n\n    \n// false like this (cleanest to read):\n\n    \n//     \n1\n:\n\n    \n//         name: something\n\n    \n// true will have everything like this (harder to read):\n\n    \n//     {\n1\n: {name: something}}\n\n\n    \nyaml_default_flow_style\n:\n \nfalse\n\n\n\n\n\n\nyaml_detect_timestamp\n\n\nDetects python datetime objects when converting to YAML and will convert them to the appropriate syntax for YAML.\n\n\n    \n// Detect timestamps on conversion for yaml\n\n    \nyaml_detect_timestamp\n:\n \ntrue\n,\n\n\n\n\n\n\nyaml_indent\n\n\nAllows the configuration of YAML indentation.\n\n\n    \n// Sets the indentation level for generated yaml\n\n    \nyaml_indent\n:\n \n4\n,\n\n\n\n\n\n\nplist_detect_timestamp\n\n\nWhen converting to PLIST, this will instruct the library to detect python datetime objects and convert them appropriately for PLIST.\n\n\n    \n// Detect timestamps on conversion for plists\n\n    \nplist_detect_timestamp\n:\n \ntrue\n,\n\n\n\n\n\n\njson_preserve_binary_data\n\n\nWhen converting to JSON, binary types will be preserved as a special type so that when converting to YAML or PLIST, the data can be preserved.  The JSON spec doesn\nt really support binary types natively.\n\n\n    \n// Preserve binary data when converting to JSON\n\n    \n// This will create binary data in this form which\n\n    \n// will be recongnized and representing in plist and yaml native binary format:\n\n    \n//    {\n\n    \n//        \n!!python/object:plistlib.Data\n: \nU29tZSBkYXRh\n\n    \n//    }\n\n    \njson_preserve_binary_data\n:\n \ntrue\n,\n\n\n\n\n\n\nplist_none_handler\n\n\nSets how SerializedDataConverter will handle a \nNone\n (or null) type when converting to PLIST.\n\n\n\n\n\n\n\n\nMode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfail\n\n\nThis will let the conversion fail as null types are not in the spec.\n\n\n\n\n\n\nfalse\n\n\nThis will convert null types to the boolean value of \nfalse\n.\n\n\n\n\n\n\nstrip\n\n\nThis will remove the null type attribute all together.\n\n\n\n\n\n\n\n\n    \n// When converting to a plist, and the structure contains none, the plugin should:\n\n    \n//    - \nfail\n: let the conversion fail\n\n    \n//    - \nfalse\n: set the None objects to False\n\n    \n//    - \nstrip\n: strip the None members from the structure\n\n    \nplist_none_handler\n:\n \nfail\n\n\n\n\n\n\nLinux Issues (ST2 only)\n\n\nI have provided a fix for Ubuntu.  Ubuntu requires a full install of Python2.6, but it only comes with a minimal install by default.  You can enter the command below in your linux terminal to get the full install.\n\n\nsudo apt-get install python2.6\n\n\nI have provided the Python lib path in the settings file so it may be adapted for other distros in needed.\n\n\nlinux_python2.6_lib\n: \n/usr/lib/python2.6/lib-dynload", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of SerializedDataConverter.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#commands", 
            "text": "All commands are accessible via the command palette.  Comments are not preserved during conversion.  Serialized Data Converter: (Type A) to (Type B)  Command that converts an open (JSON|PLIST|BPLIST|YAML) file to (JSON|PLIST|BPLIST|YAML). It will strip C style comments and also try and catch forgotten trailing commas for JSON source files if converting from JSON.  Note that when reading a BPLIST (binary PLIST), the encoding must be  Hexadecimal  or the view must be a file that exists on disk so that the raw, un-encoded data can be acquired as encoding can cause data to be lost.  Serialized Data Converter: Save (Type A) to (Type B)  Command that converts an open (JSON|PLIST|BPLIST|YAML) file to (JSON|PLIST|BPLIST|YAML) and saves it to the respective file type.  File name is determined by the appropriate setting ( plist_json_conversion_ext | plist_yaml_conversion_ext | json_yaml_conversion_ext | bplist_json_conversion_ext | bplist_yaml_conversion_ext | bplist_plist_conversion_ext ).  It will strip C style comments and also try and catch forgotten trailing commas for JSON source files if converting from JSON. If the file to convert does not exist on disk, the converted file will not initially exist either, but it will only be shown in the view buffer until saved manually.  Note that when reading a BPLIST (binary PLIST), the encoding must be  Hexadecimal  or the view must be a file that exists on disk so that the raw, un-encoded data can be acquired as encoding can lose some of the data.", 
            "title": "Commands"
        }, 
        {
            "location": "/usage/#settings", 
            "text": "SerializedDataConverter has a number of settings that can be configured.  enable_save_to_file_commands  Allows the disabling of the  save to file  commands in the command palette.       // Enable creation of new file based on extension map containing the converted data \n     // If the current file to convert does not exist on disk, the converted file will default \n     // To being shown in a view buffer only, and will not be automatically saved to disk. \n     enable_save_to_file_commands :   true ,   enable_show_in_buffer_commands  Allows the disabling of the  show conversion in view buffer  commands in the command palette.       // Enable show conversion in a view buffer \n     enable_show_in_buffer_commands :   true ,   open_in_new_buffer  When a  show conversion in view buffer  command is executed, this will force the conversion to show up in its own new view buffer.       // When converting buffer open conversion in new buffer \n     open_in_new_buffer :   true ,   (Type A)_(Type B)_conversion_ext  Allows you to provide a file name conversion mapping from any type extension to a another type extension and vice versa.  They are evaluated in the order they appear.  The name of the setting denotes which file type to which file the conversion rules apply to.  The mapping rules are defined by using the file type as the key, and the desired extension as the value.  The mapping works both ways, so if the name is  plist_json_conversion_ext , then it will convert in either direction; either PLIST   JSON or JSON   PLIST.       // When saving converted data to a file, or when opening \n     // conversion in new buffer use these extension maps for file name. \n     // Extensions will be evaluated in the order listed below. \n     // If the file does not match any of the extensions, the current \n     // extension will be replaced with either  plist ,  json , or  yaml  accordingly. \n     plist_json_conversion_ext :   [ \n         { plist :   tmLanguage ,   json :   tmLanguage.JSON }, \n         { plist :   tmPreferences ,   json :   tmPreferences.JSON }, \n         { plist :   tmTheme ,   json :   tmTheme.JSON } \n     ], \n\n     plist_yaml_conversion_ext :   [ \n         { plist :   tmLanguage ,   yaml :   tmLanguage.YAML }, \n         { plist :   tmPreferences ,   yaml :   tmPreferences.YAML }, \n         { plist :   tmTheme ,   yaml :   tmTheme.YAML } \n     ], \n\n     bplist_json_conversion_ext :   [ \n     ], \n\n     bplist_yaml_conversion_ext :   [ \n     ], \n\n     bplist_plist_conversion_ext :   [ \n     ], \n\n     json_yaml_conversion_ext :   [ \n         // Nothing to see here; move along \n         // Add your rules here \n         //{ json :  some extension ,  yaml :  some extension } \n     ],   (Type)_language  Allows the selection of a given language file to be used for the converted buffer or file.       // Languages to use on conversion \n     json_language :   Packages/JavaScript/JSON.tmLanguage , \n     yaml_language :   Packages/YAML/YAML.tmLanguage , \n     plist_language :   Packages/XML/XML.tmLanguage , \n     bplist_language :   Packages/Text/Plain text.tmLanguage ,   convert_on_save  When a file with the specified extension is saved, the plugin will automatically run the conversion command on the file and save the converted form to the disk.       convert_on_save :   [ \n         // Enable or add what you would like \n         // { ext :  tmLanguage.JSON ,  command :  json_to_plist }, \n         // { ext :  tmPreferences.JSON ,  command :  json_to_plist }, \n         // { ext :  tmTheme.JSON ,  command :  json_to_plist }, \n         // { ext :  tmLanguage.YAML ,  command :  yaml_to_plist }, \n         // { ext :  tmPreferences.YAML ,  command :  yaml_to_plist }, \n         // { ext :  tmTheme.YAML ,  command :  yaml_to_plist } \n     ],   yaml_strip_tabs_from  These are language extensions in which the converter will strip tabs from to ensure multi-lines aren t quoted with  \\t .  It also strips trailing spaces from multi-line strings. This helps multi-line strings convert in a pretty format (does not guarantee all values will be convert to a pretty format, but increases the odds). If you are having trouble converting a file and getting a 1:1 translation, remove the file type.       yaml_strip_tabs_from :   [ \n         tmLanguage , \n         tmTheme , \n         tmPreferences , \n         tmLanguage.JSON , \n         tmTheme.JSON , \n         tmPreferences.JSON \n     ],   yaml_default_flow_style  Lets you control the YAML output flow style.       // In most this should be left to  false  for easy reading, but feel free to change it \n     // (none | true | false) \n     // none shows things like this will (pretty good): \n     //      1 : {name: something} \n     // false like this (cleanest to read): \n     //      1 : \n     //         name: something \n     // true will have everything like this (harder to read): \n     //     { 1 : {name: something}} \n\n     yaml_default_flow_style :   false   yaml_detect_timestamp  Detects python datetime objects when converting to YAML and will convert them to the appropriate syntax for YAML.       // Detect timestamps on conversion for yaml \n     yaml_detect_timestamp :   true ,   yaml_indent  Allows the configuration of YAML indentation.       // Sets the indentation level for generated yaml \n     yaml_indent :   4 ,   plist_detect_timestamp  When converting to PLIST, this will instruct the library to detect python datetime objects and convert them appropriately for PLIST.       // Detect timestamps on conversion for plists \n     plist_detect_timestamp :   true ,   json_preserve_binary_data  When converting to JSON, binary types will be preserved as a special type so that when converting to YAML or PLIST, the data can be preserved.  The JSON spec doesn t really support binary types natively.       // Preserve binary data when converting to JSON \n     // This will create binary data in this form which \n     // will be recongnized and representing in plist and yaml native binary format: \n     //    { \n     //         !!python/object:plistlib.Data :  U29tZSBkYXRh \n     //    } \n     json_preserve_binary_data :   true ,   plist_none_handler  Sets how SerializedDataConverter will handle a  None  (or null) type when converting to PLIST.     Mode  Description      fail  This will let the conversion fail as null types are not in the spec.    false  This will convert null types to the boolean value of  false .    strip  This will remove the null type attribute all together.          // When converting to a plist, and the structure contains none, the plugin should: \n     //    -  fail : let the conversion fail \n     //    -  false : set the None objects to False \n     //    -  strip : strip the None members from the structure \n     plist_none_handler :   fail", 
            "title": "Settings"
        }, 
        {
            "location": "/usage/#linux-issues-st2-only", 
            "text": "I have provided a fix for Ubuntu.  Ubuntu requires a full install of Python2.6, but it only comes with a minimal install by default.  You can enter the command below in your linux terminal to get the full install.  sudo apt-get install python2.6  I have provided the Python lib path in the settings file so it may be adapted for other distros in needed.  linux_python2.6_lib :  /usr/lib/python2.6/lib-dynload", 
            "title": "Linux Issues (ST2 only)"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nSerializedDataConverter is released under the MIT license.\n\n\nCopyright \n 2012 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nPYYAML\n\n\nCopyright \n 2006 Kirill Simonov\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\n\nthis software and associated documentation files (the \nSoftware\n), to deal in\n\nthe Software without restriction, including without limitation the rights to\n\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\nof the Software, and to permit persons to whom the Software is furnished to do\n\nso, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\n\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\nSOFTWARE.\n\n\n\n\nplistlib.py\n\n\nhttps://docs.python.org/3/license.html", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "SerializedDataConverter is released under the MIT license.  Copyright   2012 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.   PYYAML  Copyright   2006 Kirill Simonov  Permission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the  Software ), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.   plistlib.py  https://docs.python.org/3/license.html", 
            "title": "License"
        }
    ]
}