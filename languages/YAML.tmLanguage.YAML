---
comment: |
    A Less crappy, simple YAML...but still a little crappy.
    A work in progress

name: YAML (simple)
scopeName: source.yaml-simple
uuid: a3a8b36d-b4c3-4212-bb86-d1d18301bf5a
fileTypes: [yaml]


# Syntax Flow
patterns:
- include: '#evil-tabs'
- include: '#line-comments'
- include: '#document-markers'
- include: '#keys'
- include: '#inline'


# Rules
repository:
    ###################
    # General Stuff
    ###################
    # Mark the start and end of the document
    document-markers:
        captures:
            '1':
                name: keyword.operator.document.start.yaml-simple
            '2':
                name: keyword.operator.document.end.yaml-simple
            '3':
                name: comment.yaml-simple
        match: ^(?:(-{3})|(\.{3}))\s*(?:(#.*)?$)

    # Lines that only have comments
    line-comments:
        captures:
            '1':
                name: comment.yaml-simple
        match: '^\s*(#.*)$'

    # Tabs are evil (at least to yaml)
    evil-tabs:
        match: \t+
        name: invalid.illegal.tab.yaml-simple

    ###################
    # Key Value Pairs
    ###################
    # Scan the line for key value pairs
    keys:
        begin: |-
            (?x)^\s*(?:
                (?:([\-?])(?:\s+))?
                (?:
                    (\w(?:.*?[^\ ])?)(?:\s*(\:)(?:\s+|(?=$))) |
                    ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)['])(\:)(?:\s+|(?=$))|
                    (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])(\:)(?:\s+|(?=$))
                )
            )
        beginCaptures:
            '1':
                name: keyword.operator.list.yaml-simple
            '2':
                name: meta.tag.yaml-simple
            '3':
                name: keyword.operator.key-separator.yaml-simple
            '4':
                name: meta.tag.yaml-simple
            '5':
                name: string.yaml-simple
            '6':
                name: keyword.operator.key-separator.yaml-simple
            '7':
                name: meta.tag.yaml-simple
            '8':
                name: string.yaml-simple
            '9':
                name: keyword.operator.key-separator.yaml-simple
        end: $
        patterns:
        -   include: '#values' #testing comment

    values:
        patterns:
        -   include: '#map'
        -   include: '#array'
        -   include: '#multi-line'
        -   include: '#strings'
        -   include: '#numerics'
        -   include: '#boolean'
        -   match: '.*'
            name: unmatched.yaml-simple

    ###################
    # Scan for Value Types
    ###################
    # Multi-line marker
    multi-line:
        patterns:
        -   captures:
                "1":
                    name: keyword.operator.multi-line.yaml-simple
                "2":
                    name: comment.yaml-simple
            match: ([|>][-+\d\s]*)\s*(#.*)?$

    # Single line maps or associative array
    map:
        begin: (\{)
        beginCaptures:
            '1':
                name: paren.lparen.yaml-simple
        end: (\})\s*(#.*)?(?=$)
        endCaptures:
            '1':
                name: paren.rparen.yaml-simple
            '2':
                name: comment.yaml-simple
        patterns:
        -   include: '#inline-keys'

    # Single line array
    array:
        begin: (\[)
        beginCaptures:
            '1':
                name: paren.lparen.yaml-simple
        end: (\])\s*(#.*)?(?=$)
        endCaptures:
            '1':
                name: paren.rparen.yaml-simple
            '2':
                name: comment.yaml-simple
        patterns:
        -   include: '#inline-array-values'

    # Inline style associative array and normal arrays
    # - [] or - {}
    inline:
        begin: ^\s*(-)\s*(?=[\{\[])
        beginCaptures:
            '1':
                name: keyword.operator.list.yaml-simple
        end: (#.*)?$
        endCaptures:
            '1':
                name: comment.yaml-simple
        patterns:
        -   include: '#map'
        -   include: '#array'

    # Inline array values
    inline-array-values:
        begin: (?<=(?:\[|,))
        end: \s*(?=(?:\]|,))
        patterns:
        -   include: '#inline-values' #testing comment

    # Inline map or associative array keys
    # - {}
    inline-keys:
        begin: |-
            (?x)\s*(?:
                (?:
                    (\w(?:.*?[^\ ])?)(?:\s*(\:)(?:\s+)) |
                    ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)['])(\:)(?:\s+)|
                    (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])(\:)(?:\s+)
                )
            )
        beginCaptures:
            '1':
                name: meta.tag.yaml-simple
            '2':
                name: keyword.operator.key-separator.yaml-simple
            '3':
                name: meta.tag.yaml-simple
            '4':
                name: string.yaml-simple
            '5':
                name: keyword.operator.key-separator.yaml-simple
            '6':
                name: meta.tag.yaml-simple
            '7':
                name: string.yaml-simple
            '8':
                name: keyword.operator.key-separator.yaml-simple
        end: \s*,|(?=[\}])
        patterns:
        -   include: '#inline-values' #testing comment

    # Inline values
    inline-values:
        patterns:
        -   include: '#inline-strings'
        -   include: '#inline-numerics'
        -   include: '#inline-boolean'
        -   match: '[^,\}\]]*'
            name: unmatched.yaml-simple

    # Numbers (with trailing comments)
    numerics:
        patterns:
        -   match: '[+\-]?[\d_]+(?:(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?\s*(#.*)?(?=$)'
            name: constant.numeric.yaml-simple
        -   match: '[+\-]?\.inf\b|NaN\b|0x[\dA-Fa-f_]+|0b[10_]+\s*(#.*)?(?=$)'
            name: constant.numeric.yaml-simple

    # Booleans (with trailing comments)
    boolean:
        patterns:
        -   match: (?:true|false|TRUE|FALSE|True|False|yes|no)\s*(#.*)?(?=$)
            name: constant.language.boolean.yaml-simple

    # Strings (with trailing comments)
    strings:
        patterns:
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '(["](?:(?:\\.)|(?:[^"\\]|\\"))*?["])\s*(#.*)?(?=$)'
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '([''](?:(?:\\.)|(?:[^''\\]|''{2}))*?[''])\s*(#.*)?(?=$)'

    # Inline numbers
    inline-numerics:
        patterns:
        -   match: '[+\-]?[\d_]+(?:(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?'
            name: constant.numeric.yaml-simple
        -   match: '[+\-]?\.inf\b|NaN\b|0x[\dA-Fa-f_]+|0b[10_]+'
            name: constant.numeric.yaml-simple

    # Inline booleans
    inline-boolean:
        patterns:
        -   match: (?:true|false|TRUE|FALSE|True|False|yes|no)
            name: constant.language.boolean.yaml-simple

    # Inline strings
    inline-strings:
        patterns:
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '(["](?:(?:\\.)|(?:[^"\\]|\\"))*?["])\s*(?=(?:,|\}))'
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '([''](?:(?:\\.)|(?:[^''\\]|''{2}))*?[''])\s*(?=(?:,|\}))'
...

# Todo
# -Multi-line double quote blocks
# -Look into stuff below

#-   match: '!![\w//]+'
#    name: constant.yaml-simple

#-   match: '[&\*][a-zA-Z0-9-_]+'
#    name: constant.language.yaml-simple

#-   match: <<\w*:\w*
#    name: keyword.operator.yaml-simple
#-   match: -\s*(?=[\{])
#    name: keyword.operator.yaml-simple
