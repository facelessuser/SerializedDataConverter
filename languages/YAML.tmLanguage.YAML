# This is the main file that gets edited
---
comment: |
    A Less crappy, simple YAML...but still a little crappy.
    A work in progress

name: YAML (simple)
scopeName: source.yaml-simple
uuid: a3a8b36d-b4c3-4212-bb86-d1d18301bf5a
fileTypes: [yaml, yml]


# Syntax Flow
patterns:
- include: '#evil-tabs'
- include: '#line-comments'
- include: '#document-markers'
- include: '#keys'
- include: '#inline'


# Rules
repository:
    ###################
    # General Stuff
    ###################
    # Mark the start and end of the document
    document-markers:
        captures:
            '1':
                name: keyword.operator.document.start.yaml-simple
            '2':
                name: keyword.operator.document.end.yaml-simple
            '3':
                name: comment.yaml-simple
        match: ^(?:(-{3})|(\.{3}))[ \r\n\f]*(?:(#.*)?$)

    # Lines that only have comments
    line-comments:
        captures:
            '1':
                name: comment.yaml-simple
        match: !!regex '^[ \r\n\f]*(#.*)$'

    # Tabs are evil (at least to yaml)
    evil-tabs:
        patterns:
        - {match: !!regex '\t+', name: invalid.illegal.tab.yaml-simple}
        # match: \t+
        # name: invalid.illegal.tab.yaml-simple

    ###################
    # Key Value Pairs
    ###################
    # Scan the line for key value pairs
    keys:
        begin: |-
            (?x)^[\ \r\n\f]*(?:
                (?:([\-?])(?:[\ \r\n\f]+))?
                (?:
                    (\w(?:.*?[^\ ])?)(?:[\ \r\n\f]*(\:)(?:[\ \f]+(!![\w//]+))?(?:[\ \r\n\f]+|(?=$))) |
                    ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)['])(\:)(?:[\ \f]+(!![\w//]+))?(?:[\ \r\n\f]+|(?=$))|
                    (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])(\:)(?:[\ \f]+(!![\w//]+))?(?:\[\ \r\n\f]+|(?=$))
                )
            )
        beginCaptures:
            '1':
                name: keyword.operator.list.yaml-simple
            '2':
                name: meta.tag.yaml-simple
            '3':
                name: keyword.operator.key-separator.yaml-simple
            '4':
                name: support.type.yaml-simple
            '5':
                name: meta.tag.yaml-simple
            '6':
                name: string.yaml-simple
            '7':
                name: keyword.operator.key-separator.yaml-simple
            '8':
                name: support.type.yaml-simple
            '9':
                name: meta.tag.yaml-simple
            '10':
                name: string.yaml-simple
            '11':
                name: keyword.operator.key-separator.yaml-simple
            '12':
                name: support.type.yaml-simple
        end: $
        patterns:
        -   include: '#values' #testing comment

    values:
        patterns:
        -   include: '#sublime-regex'
        -   include: '#address-tag'
        -   include: '#map'
        -   include: '#array'
        -   include: '#multi-line'
        -   include: '#strings'
        -   include: '#numerics'
        -   include: '#boolean'
        -   match: '.*'
            name: unmatched.yaml-simple

    ###################
    # Scan for Value Types
    ###################
    # Multi-line marker
    multi-line:
        patterns:
        -   captures:
                "1":
                    name: keyword.operator.multi-line.yaml-simple
                "2":
                    name: comment.yaml-simple
            match: ([|>][-+\d\r\n\f]*)[ \r\n\f]*(#.*)?$

    # Single line maps or associative array
    map:
        begin: '(\{)'
        beginCaptures:
            '1':
                name: keyword.paren.left.yaml-simple
        end: (\})[ \r\n\f]*(?:(#.*)?|(?=$|,|\}|\]))
        endCaptures:
            '1':
                name: keyword.paren.right.yaml-simple
            '2':
                name: comment.yaml-simple
        patterns:
        -   include: '#inline-keys'

    # Single line array
    array:
        begin: (\[)(?:[ \f]*(!![\w//]+))?
        beginCaptures:
            '1':
                name: keyword.paren.left.yaml-simple
            '2':
                name: support.type.yaml-simple
        end: (\])[ \r\n\f]*(?:(#.*)?|(?=$|,|\}|\]))
        endCaptures:
            '1':
                name: keyword.paren.right.yaml-simple
            '2':
                name: comment.yaml-simple
        patterns:
        -   include: '#inline-array-values'

    # Inline style associative array and normal arrays
    # - [] or - {}
    inline:
        begin: ^[ \r\n\f]*(?:(-)[ \r\n\f]*)?(?=[\{\[])
        beginCaptures:
            '1':
                name: keyword.operator.list.yaml-simple
        end: (#.*)?$
        endCaptures:
            '1':
                name: comment.yaml-simple
        patterns:
        -   include: '#map'
        -   include: '#array'

    # Inline array values
    inline-array-values:
        begin: (?<=(?:\[|,|[ \r\n\f]))
        end: '[ \r\n\f]*(?:(,)\n?|(?=\]))'
        endCaptures:
            '1':
                name: keyword.paren.separator.yaml-simple
        patterns:
        -   include: '#inline-values' #testing comment

    inline-sublime-regex:
        patterns:
        -   begin: '('')'
            end: '('')[ \r\n\f]*(?=(?:,|\}|\]))'
            patterns:
            -   include: source.regexp
        -   begin: '(")'
            end: '(")[ \r\n\f]*(?=(?:,|\}|\]))'
            patterns:
            -   include: source.regexp
        -   include: source.regexp

    sublime-regex:
        patterns:
        -   begin: '(?<=(?:\!\!regex ))('')'
            end: '('')[ \f]*(#.*)?(?=$)'
            patterns:
            -   include: source.regexp
        -   begin: '(?<=(?:\!\!regex ))(")'
            end: '(")[ \f]*(#.*)?(?=$)'
            patterns:
            -   include: source.regexp

    # Inline map or associative array keys
    # - {}
    inline-keys:
        patterns:
        -   begin: |-
                (?x)[\ \r\n\f]*(?:
                    (?:
                        (\w(?:.*?[^\ ])?)(?:[\ \r\n\f]*(\:)(?:[\ \f]+(!!regex))(?:[\ \r\n\f]+)) |
                        ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)['])(\:)(?:[\ \f]+(!!regex))(?:[\ \r\n\f]+)|
                        (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])(\:)(?:[\ \f]+(!!regex))(?:[\ \r\n\f]+)
                    )
                )
            beginCaptures:
                '1':
                    name: meta.tag.yaml-simple
                '2':
                    name: keyword.operator.key-separator.yaml-simple
                '3':
                    name: support.type.yaml-simple
                '4':
                    name: meta.tag.yaml-simple
                '5':
                    name: string.yaml-simple
                '6':
                    name: keyword.operator.key-separator.yaml-simple
                '7':
                    name: support.type.yaml-simple
                '8':
                    name: meta.tag.yaml-simple
                '9':
                    name: string.yaml-simple
                '10':
                    name: keyword.operator.key-separator.yaml-simple
                '11':
                    name: support.type.yaml-simple
            end: '[ \r\n\f]*(?:(,)\n?|(?=\}))'
            endCaptures:
                '1':
                    name: keyword.paren.separator.yaml-simple
            patterns:
            -   include: '#inline-sublime-regex'

        -   begin: |-
                (?x)[\ \r\n\f]*(?:
                    (?:
                        (\w(?:.*?[^\ ])?)(?:[\ \r\n\f]*(\:)(?:[\ \f]+(!![\w//]+))?(?:[\ \r\n\f]+)) |
                        ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)['])(\:)(?:[\ \f]+(!![\w//]+))?(?:[\ \r\n\f]+)|
                        (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])(\:)(?:[\ \f]+(!![\w//]+))?(?:[\ \r\n\f]+)
                    )
                )
            beginCaptures:
                '1':
                    name: meta.tag.yaml-simple
                '2':
                    name: keyword.operator.key-separator.yaml-simple
                '3':
                    name: support.type.yaml-simple
                '4':
                    name: meta.tag.yaml-simple
                '5':
                    name: string.yaml-simple
                '6':
                    name: keyword.operator.key-separator.yaml-simple
                '7':
                    name: support.type.yaml-simple
                '8':
                    name: meta.tag.yaml-simple
                '9':
                    name: string.yaml-simple
                '10':
                    name: keyword.operator.key-separator.yaml-simple
                '11':
                    name: support.type.yaml-simple
            end: '[ \r\n\f]*(?:(,)\n?|(?=\}))'
            endCaptures:
                '1':
                    name: keyword.paren.separator.yaml-simple
            patterns:
            -   include: '#inline-values' #testing comment

    # Inline values
    inline-values:
        patterns:
        -   include: '#inline-address'
        -   include: '#inline-strings'
        -   include: '#inline-numerics'
        -   include: '#inline-boolean'
        -   include: '#map'
        -   include: '#array'
        -   match: '[^\{\[\}\],]*'
            name: unmatched.yaml-simple

    # Numbers (with trailing comments)
    numerics:
        patterns:
        -   match: '[+\-]?[\d_]+(?:(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?[ \r\n\f]*(#.*)?(?=$)'
            name: constant.numeric.yaml-simple
        -   match: '[+\-]?\.inf\b|NaN\b|0x[\dA-Fa-f_]+|0b[10_]+[ \r\n\f]*(#.*)?(?=$)'
            name: constant.numeric.yaml-simple

    # Booleans (with trailing comments)
    boolean:
        patterns:
        -   match: (?:true|false|TRUE|FALSE|True|False|yes|no)[ \r\n\f]*(#.*)?(?=$)
            name: constant.language.boolean.yaml-simple

    # Strings (with trailing comments)
    strings:
        patterns:
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '(["](?:(?:\\.)|(?:[^"\\]|\\"))*?["])[ \r\n\f]*(#.*)?(?=$)'
        -   begin: '["]'
            end: '["][ \r\n\f]*(#.*)?(?=$)'
            name: string.yaml-simple
            patterns:
            -   match: '(?:(?:\\.)|(?:[^"\\]|\\"))*?'
                name: string.yaml-simple
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '([''](?:(?:\\.)|(?:[^''\\]|''{2}))*?[''])[ \r\n\f]*(#.*)?(?=$)'

    # address
    address-tag:
        patterns:
        -   captures:
                '1':
                    name: support.type.address.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '([&\*][a-zA-Z0-9\-_]+)[ \r\n\f]*(#.*)?(?=$)'

    # Inline numbers
    inline-numerics:
        patterns:
        -   match: '[+\-]?[\d_]+(?:(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?(?=(?:,|\}|\]))'
            name: constant.numeric.yaml-simple
        -   match: '[+\-]?\.inf\b|NaN\b|0x[\dA-Fa-f_]+|0b[10_]+'
            name: constant.numeric.yaml-simple

    # Inline booleans
    inline-boolean:
        patterns:
        -   match: (?:true|false|TRUE|FALSE|True|False|yes|no)(?=(?:,|\}|\]))
            name: constant.language.boolean.yaml-simple

    # Inline strings
    inline-strings:
        patterns:
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '(["](?:(?:\\.)|(?:[^"\\]|\\"))*?["])[ \r\n\f]*(?=(?:,|\}|\]))'
        -   begin: '["]'
            end: '["][ \r\n\f]*(?=(?:,|\}|\]))'
            name: string.yaml-simple
            patterns:
            -   match: '(?:(?:\\.)|(?:[^"\\]|\\"))*?'
                name: string.yaml-simple
        -   captures:
                '1':
                    name: string.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '([''](?:(?:\\.)|(?:[^''\\]|''{2}))*?[''])[ \r\n\f]*(?=(?:,|\}|\]))'

    # inline address
    inline-address:
        patterns:
        -   captures:
                '1':
                    name: support.type.class.address.yaml-simple
                '2':
                    name: comment.yaml-simple
            match: '([&\*][a-zA-Z0-9\-_]+)[ \r\n\f]*(?=(?:,|\}|\]))'
...

# Todo
# -Look into stuff below

#-   match: <<\w*:\w*
#    name: keyword.operator.yaml-simple
#-   match: -\s*(?=[\{])
#    name: keyword.operator.yaml-simple
