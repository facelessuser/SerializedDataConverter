# YAML-SIMPLE
---
comment: |
    A Less crappy, simple YAML...but still a little crappy :).
    A work in progress

name: YAML (simple)
scopeName: source.yaml-simple
uuid: a3a8b36d-b4c3-4212-bb86-d1d18301bf5a
fileTypes: [yaml, yml]                                               # Comment test 0

# Syntax Flow
patterns:
-   include: '#evil-tabs'                                            # Comment test 1
-   include: '#line-comments'
-   include: '#document-markers'
-   include: '#multi-line'
-   include: '#single-line'
-   include: '#inline-arrays'
-   include: '#other-single-line'

# Rules
repository:
    ###################
    # General Stuff
    ###################
    # Mark the start and end of the document
    document-markers:                                                # Comment test 2
        captures:                                                    # Comment test 3
            '1': {name: keyword.operator.document.start.yaml-simple} # Comment test 4
            '2': {name: keyword.operator.document.end.yaml-simple}
            '3': {name: comment.yaml-simple}
        match: !!regex ^(?:(-{3})|(\.{3}))[ \r\n]*(?:(#.*)?$)

    # Lines that only have comments
    line-comments:
        captures:
            '1': {name: comment.yaml-simple}
        match: !!regex '^[ \r\n]*(#.*)$'                             # Comment test 5

    # Tabs are evil (at least to yaml)
    evil-tabs:
        match: !!regex '\t+'
        name: invalid.illegal.tab.yaml-simple

    ###################
    # Lines
    ###################
    # Scan the line for key value pairs
    single-line:
        patterns:
        -   begin: !!regex |-
                (?x)^[\ ]*(?:
                    (?:([\-?])(?:[\ \r\n]+))?
                    (?:
                        (\w(?:.*?[^\ ])?|<<) |
                        ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)[']) |
                        (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])
                    )
                    [\ \r\n]*(\:)(?:[\ \r\n]+|(?=$))
                )

            beginCaptures:
                '1': {name: keyword.operator.list.yaml-simple}
                '2': {name: meta.tag.yaml-simple}
                '3': {name: keyword.operator.key-separator.yaml-simple}
                '4': {name: meta.tag.yaml-simple}
                '5': {name: string.yaml-simple}
                '6': {name: keyword.operator.key-separator.yaml-simple}
                '7': {name: meta.tag.yaml-simple}
                '8': {name: string.yaml-simple}
                '9': {name: keyword.operator.key-separator.yaml-simple}
            end: !!regex $
            patterns:
            -   match: !!regex (#.*)$
                name : comment.yaml-simple
            -   include: '#cast-values'
            -   include: '#values'
            -   match: !!regex '.*'
                name: unmatched.yaml-simple

        # array continuing on the next line
        -   captures:
                '2': {name: keyword.operator.list.yaml-simple}
                '3': {name: comment.yaml-simple}
            match: !!regex ^( *)(-|\?)[ ]*(#.*)?$


    cast-values:
        patterns:
        # -   captures:
        #         '1': {name: support.type.yaml-simple}
        #         '2': {name: keyword.operator.multi-line.yaml-simple}
        #         '3': {name: comment.yaml-simple}
        #     match: !!regex (?:(!![\w//]+)[ ]+)?([|>][-+\d\r\n]*)[ \r\n]*(#.*)?$
        -   begin: !!regex (!!regex)[ ]+
            beginCaptures:
                '1': {name: support.type.yaml-simple}
            end: !!regex (?=$)
            patterns:
            -   include: '#sublime-regex'
        -   begin: !!regex (!![\w//]+)[ ]+
            beginCaptures:
                '1': {name: support.type.yaml-simple}
            end: !!regex (?=$)
            patterns:
            -   include: '#values'
            -   match: !!regex '.*'
                name: unmatched.yaml-simple

    values:
        patterns:
        -   include: '#address-tag'
        -   include: '#associative-array'
        -   include: '#array'
        -   include: '#strings'
        -   include: '#numerics'
        -   include: '#boolean'

    # Multi-line key value pairs
    multi-line:
        patterns:
        -   begin: !!regex |-
                (?x)^([\ ]*)(?:([\-])([\ ]+))?
                (?:
                    (\w(?:.*?[^\ ])?|<<) |
                    ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)[']) |
                    (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])
                )
                [\ \r\n]*(\:)(?:[\ \r\n]+|(?=$))
                (!!regex)[\ ]+([|>][-+\d\r\n]*)[\ ]*(\#.*)?
            beginCaptures:
                '2':  {name: keyword.operator.list.yaml-simple}
                '4':  {name: meta.tag.yaml-simple}
                '5':  {name: keyword.operator.key-separator.yaml-simple}
                '6':  {name: meta.tag.yaml-simple}
                '7':  {name: string.yaml-simple}
                '8':  {name: keyword.operator.key-separator.yaml-simple}
                '9':  {name: meta.tag.yaml-simple}
                '10': {name: string.yaml-simple}
                '11': {name: keyword.operator.key-separator.yaml-simple}
                '12': {name: support.type.yaml-simple}
                '13': {name: keyword.operator.multi-line.yaml-simple}
                '14': {name: comment.yaml-simple}
            end: !!regex ^(?! *$|\1\3 {2})
            patterns:
            -   include: source.regexp

        -   begin: !!regex |-
                (?x)^([\ ]*)(?:([\-])([\ ]+))?
                (?:
                    (\w(?:.*?[^\ ])?|<<) |
                    ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)[']) |
                    (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])
                )
                [\ \r\n]*(\:)(?:[\ \r\n]+|(?=$))
                (?:(!![\w//]+)[\ ]+)?([|>][-+\d\r\n]*)[\ ]*(\#.*)?
            beginCaptures:
                '2':  {name: keyword.operator.list.yaml-simple}
                '4':  {name: meta.tag.yaml-simple}
                '5':  {name: keyword.operator.key-separator.yaml-simple}
                '6':  {name: meta.tag.yaml-simple}
                '7':  {name: string.yaml-simple}
                '8':  {name: keyword.operator.key-separator.yaml-simple}
                '9':  {name: meta.tag.yaml-simple}
                '10': {name: string.yaml-simple}
                '11': {name: keyword.operator.key-separator.yaml-simple}
                '12': {name: support.type.yaml-simple}
                '13': {name: keyword.operator.multi-line.yaml-simple}
                '14': {name: comment.yaml-simple}
            end: !!regex ^(?! *$|\1\3 {2})
            patterns:
            -   match: !!regex '.*'
                name: multiline.text.yaml-simple unmatched.yaml-simple

    # Inline style associative array and normal arrays
    # - [] or - {}
    inline-arrays:
        begin: !!regex ^[ \r\n]*(?:(-)[ \r\n]*)?(?=(?:(!![\w//]+)[ ]+)?[\{\[])
        beginCaptures:
            '1': {name: keyword.operator.list.yaml-simple}
        end: !!regex (#.*)?$
        endCaptures:
            '1': {name: comment.yaml-simple}
        patterns:
        -   include: '#associative-array'
        -   include: '#array'

    ###################
    # Inline Arrays
    ###################
    # Single line associative array
    associative-array:
        begin: !!regex '(?:(!![\w//]+)[ ]+)?(\{)'
        beginCaptures:
            '1': {name: support.type.yaml-simple}
            '2': {name: keyword.paren.left.yaml-simple}
        end: !!regex (\})[ \r\n]*(?:(#.*)?|(?=$|,|\}|\]))
        endCaptures:
            '1': {name: keyword.paren.right.yaml-simple}
            '2': {name: comment.yaml-simple}
        patterns:
        -   include: '#inline-keys'

    # Inline associative array keys
    # - {}
    inline-keys:
        begin: !!regex |-
            (?x)[\ \r\n]*(?:
                (?:
                    (\w(?:.*?[^\ ])?|<<) |
                    ([']((?:(?:\\.)|(?:[^'\\]|'{2}))*?)[']) |
                    (["]((?:(?:\\.)|(?:[^"\\]|\\"))*?)["])
                )
                [\ \r\n]*(\:)(?:[\ \r\n]+|(?=$))
            )
        beginCaptures:
            '1': {name: meta.tag.yaml-simple}
            '2': {name: keyword.operator.key-separator.yaml-simple}
            '3': {name: meta.tag.yaml-simple}
            '4': {name: string.yaml-simple}
            '5': {name: keyword.operator.key-separator.yaml-simple}
            '6': {name: meta.tag.yaml-simple}
            '7': {name: string.yaml-simple}
            '8': {name: keyword.operator.key-separator.yaml-simple}
        end: !!regex '[ \r\n]*(?:(,)\n?|(?=\}))'
        endCaptures:
            '1': {name: keyword.paren.separator.yaml-simple}
        patterns:
        -   include: '#inline-cast-values'
        -   include: '#inline-values'

    inline-cast-values:
        patterns:
            -   begin: !!regex (!!regex)[ ]+
                beginCaptures:
                    '1': {name: support.type.yaml-simple}
                end: !!regex (?=(?:,\n?|\}))
                patterns:
                -   include: '#inline-sublime-regex'
            -   begin: !!regex (!![\w//]+)[ ]+
                end: !!regex (?=(?:,\n?|\}))
                patterns:
                -   include: '#inline-values'

    # Inline values
    inline-values:
        patterns:
        -   include: '#inline-address'
        -   include: '#inline-strings'
        -   include: '#inline-numerics'
        -   include: '#inline-boolean'
        -   include: '#associative-array'
        -   include: '#array'
        -   match: !!regex '[^\{\[\}\],]*'
            name: unmatched.yaml-simple

    # Single line array
    array:
        begin: !!regex (?:(!![\w//]+)[ ]+)?(\[)
        beginCaptures:
            '1': {name: support.type.yaml-simple}
            '2': {name: keyword.paren.left.yaml-simple}
        end: !!regex (\])[ \r\n]*(?:(#.*)?|(?=$|,|\}|\]))
        endCaptures:
            '1': {name: keyword.paren.right.yaml-simple}
            '2': {name: comment.yaml-simple}
        patterns:
        -   begin: !!regex (!!regex)[ ]*
            beginCaptures:
                '1': {name: support.type.yaml-simple}
            end: !!regex '[ \r\n]*(?:(,)\n?|(?=\]))'
            endCaptures:
                '1': {name: keyword.paren.separator.yaml-simple}
            patterns:
            -   include: '#inline-sublime-regex'
            -   begin: !!regex (?<=(?:\[|,|[ \r\n]))
                end: !!regex '(?=(?:,\n?|\]))'
                patterns:
                -   include: '#inline-values'
        -   begin: !!regex (!![\w//]+)[ ]*
            end: !!regex '[ \r\n]*(?:(,)\n?|(?=\]))'
            endCaptures:
                '1': {name: keyword.paren.separator.yaml-simple}
            patterns:
            -   begin: !!regex (?<=(?:\[|,|[ \r\n]))
                end: !!regex '(?=(?:,\n?|\]))'
                patterns:
                -   include: '#inline-values'
        -   include: '#inline-array-values'

    # Inline array values
    inline-array-values:
        begin: !!regex (?<=(?:\[|,|[ \r\n]))
        end: !!regex '[ \r\n]*(?:(,)\n?|(?=\]))'
        endCaptures:
            '1': {name: keyword.paren.separator.yaml-simple}
        patterns:
        -   include: '#inline-values'

    ###################
    # Numbers
    ###################
    # Numbers (with trailing comments)
    numerics:
        patterns:
        -   captures:
                '1': {name: constant.numeric.yaml-simple}
                '2': {name: comment.yaml-simple}
            match: !!regex '([+\-]?[\d_]+(?:(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?)[ ]*(#.*)?(?=$)'
        -   captures:
                '1': {name: constant.numeric.yaml-simple}
                '2': {name: comment.yaml-simple}
            match: !!regex '([+\-]?\.inf\b|NaN\b|0x[\dA-Fa-f_]+|0b[10_]+)[ ]*(#.*)?(?=$)'

    # Inline numbers
    inline-numerics:
        patterns:
        -   captures:
                '1': {name: constant.numeric.yaml-simple}
            match: !!regex '([+\-]?[\d_]+(?:(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?)[ ]*(?=(?:,|\}|\]))'
        -   captures:
                '1': {name: constant.numeric.yaml-simple}
            match: !!regex '([+\-]?\.inf\b|NaN\b|0x[\dA-Fa-f_]+|0b[10_]+)[ ]*(?=(?:,|\}|\]))'

    ###################
    # Booleans
    ###################
    # Booleans (with trailing comments)
    boolean:
        patterns:
        -   captures:
                '1': {name: constant.language.boolean.yaml-simple}
                '2': {name: comment.yaml-simple}
            match: !!regex (true|false|TRUE|FALSE|True|False|yes|no)[ ]*(#.*)?(?=$)

    # Inline booleans
    inline-boolean:
        patterns:
        -   captures:
                '1': {name: constant.language.boolean.yaml-simple}
            match: !!regex (true|false|TRUE|FALSE|True|False|yes|no)[ ]*(?=(?:,|\}|\]))

    ###################
    # Strings
    ###################
    # Strings (with trailing comments)
    strings:
        patterns:
        -   begin: !!regex '(["])'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '(["])[ \r\n]*(#.*)?(?=$)'
            endCaptures:
                '1': {name: string.yaml-simple}
                '2': {name: comment.yaml-simple}
            patterns:
            -   match: !!regex '(?:(?:\\.)|(?:[^"\\]|\\"))*?'
                name: string.yaml-simple
        -   begin: !!regex '([''])'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '([''])[ \r\n]*(#.*)?(?=$)'
            endCaptures:
                '1': {name: string.yaml-simple}
                '2': {name: comment.yaml-simple}
            patterns:
            -   match: !!regex '(?:(?:\\.)|(?:[^''\\]|''{2}))*?'
                name: string.yaml-simple

    # Inline strings
    inline-strings:
        patterns:
        -   begin: !!regex '(["])'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '(["])[ \r\n]*(?=(?:,|\}|\]))'
            endCaptures:
                '1': {name: string.yaml-simple}
            patterns:
            -   match: !!regex '(?:(?:\\.)|(?:[^"\\]|\\"))*?'
                name: string.yaml-simple
        -   begin: !!regex '([''])'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '([''])[ \r\n]*(?=(?:,|\}|\]))'
            endCaptures:
                '1': {name: string.yaml-simple}
            patterns:
            -   match: !!regex '(?:(?:\\.)|(?:[^''\\]|''{2}))*?'
                name: string.yaml-simple

    ###################
    # Address
    ###################
    # address
    address-tag:
        captures:
            '1': {name: support.type.address.yaml-simple}
            '2': {name: comment.yaml-simple}
        match: !!regex '([&\*][a-zA-Z0-9\-_]+)[ \r\n]*(#.*)?(?=$)'

    # inline address
    inline-address:
        patterns:
        -   captures:
                '1': {name: support.type.class.address.yaml-simple}
                '2': {name: comment.yaml-simple}
            match: !!regex '([&\*][a-zA-Z0-9\-_]+)[ ]*(?=(?:,|\}|\]))'

    ###################
    # Sublime regex highlight
    ###################
    sublime-regex:
        patterns:
        -   begin: !!regex '('')'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '('')[ ]*(#.*)?(?=$)'
            endCaptures:
                '1': {name: string.yaml-simple}
                '2': {name: comment.yaml}
            patterns:
            -   include: source.regexp
        -   begin: !!regex '(")'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '(")[ ]*(#.*)?(?=$)'
            endCaptures:
                '1': {name: string.yaml-simple}
                '2': {name: comment.yaml}
            patterns:
            -   include: source.regexp
        -   include: source.regexp

    inline-sublime-regex:
        patterns:
        -   begin: !!regex '('')'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '('')[ ]*(?=(?:,|\}|\]))'
            endCaptures:
                '1': {name: string.yaml-simple}
                '2': {name: comment.yaml}
            patterns:
            -   include: source.regexp
        -   begin: !!regex '(")'
            beginCaptures:
                '1': {name: string.yaml-simple}
            end: !!regex '(")[ ]*(?=(?:,|\}|\]))'
            endCaptures:
                '1': {name: string.yaml-simple}
                '2': {name: comment.yaml}
            patterns:
            -   include: source.regexp
        -   include: source.regexp

    other-single-line:
        patterns:
        -   begin: !!regex |-
                (?x)^[\ ]*(?:
                    (?:([\-])(?:[\ \r\n]+))?(?=.+$)
                )
            beginCaptures:
                '1': {name: keyword.operator.list.yaml-simple}
            end: !!regex $
            patterns:
            -   match: !!regex '[ ]*(#.*)(?=$)'
                name : comment.yaml-simple
            -   include: '#cast-values'
            -   include: '#values'
            -   match: !!regex '.*'
                name: unmatched.yaml-simple

        # array continuing on the next line
        -   captures:
                '2': {name: keyword.operator.list.yaml-simple}
                '3': {name: comment.yaml-simple}
            match: !!regex ^( *)(-|\?)[ ]*(#.*)?$

...
